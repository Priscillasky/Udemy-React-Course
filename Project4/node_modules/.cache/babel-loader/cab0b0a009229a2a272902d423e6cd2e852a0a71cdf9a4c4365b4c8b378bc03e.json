{"ast":null,"code":"var _jsxFileName = \"/Users/code-princess/Desktop/React/Project4/src/App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport Header from './Components/Header/Header';\nimport UserInput from './Components/UserInput/UserInput';\nimport Table from './Components/Table/Table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [userInput, setUserInput] = useState(null);\n  const calculateHandler = userInput => {\n    setUserInput(userInput);\n  };\n  const yearlyData = []; // per-year results\n\n  let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n  const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n  const expectedReturn = +userInput['expected-return'] / 100;\n  const duration = +userInput['duration'];\n\n  // The below code calculates yearly results (total savings, interest etc)\n  for (let i = 0; i < duration; i++) {\n    const yearlyInterest = currentSavings * expectedReturn;\n    currentSavings += yearlyInterest + yearlyContribution;\n    yearlyData.push({\n      // feel free to change the shape of the data pushed to the array!\n      year: i + 1,\n      yearlyInterest: yearlyInterest,\n      savingsEndOfYear: currentSavings,\n      yearlyContribution: yearlyContribution\n    });\n  }\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserInput, {\n      onCalculate: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"fCXvCeCdp/eInhYAy188SZ+/4/8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Header","UserInput","Table","jsxDEV","_jsxDEV","App","_s","userInput","setUserInput","useState","calculateHandler","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","onCalculate","_c","$RefreshReg$"],"sources":["/Users/code-princess/Desktop/React/Project4/src/App.js"],"sourcesContent":["\nimport React,{} from 'react';\nimport Header from './Components/Header/Header';\nimport UserInput from './Components/UserInput/UserInput';\nimport Table from './Components/Table/Table';\n\nfunction App() {\n  const[userInput,setUserInput] = useState(null)\n  const calculateHandler = (userInput) => {\n    setUserInput(userInput);\n    }\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n\n  };\n\n  return (\n    <div>\n      <Header />\n\n      <UserInput onCalculate = {calculateHandler} />\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n      <Table />\n     \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AACA,OAAOA,KAAK,MAAS,OAAO;AAC5B,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,SAAS,MAAM,kCAAkC;AACxD,OAAOC,KAAK,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAK,CAACC,SAAS,EAACC,YAAY,CAAC,GAAGC,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAMC,gBAAgB,GAAIH,SAAS,IAAK;IACtCC,YAAY,CAACD,SAAS,CAAC;EACvB,CAAC;EAED,MAAMI,UAAU,GAAG,EAAE,CAAC,CAAC;;EAEvB,IAAIC,cAAc,GAAG,CAACL,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;EACpD,MAAMM,kBAAkB,GAAG,CAACN,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;EAC9D,MAAMO,cAAc,GAAG,CAACP,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;EAC1D,MAAMQ,QAAQ,GAAG,CAACR,SAAS,CAAC,UAAU,CAAC;;EAEvC;EACA,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;IACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;IACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;IACrDF,UAAU,CAACO,IAAI,CAAC;MACd;MACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;MACXC,cAAc,EAAEA,cAAc;MAC9BG,gBAAgB,EAAER,cAAc;MAChCC,kBAAkB,EAAEA;IACtB,CAAC,CAAC;EAEN;EAAC;EAED,oBACET,OAAA;IAAAiB,QAAA,gBACEjB,OAAA,CAACJ,MAAM;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEVrB,OAAA,CAACH,SAAS;MAACyB,WAAW,EAAIhB;IAAiB;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAG9CrB,OAAA,CAACF,KAAK;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEN,CAAC;AAEV;AAACnB,EAAA,CAtCQD,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AAwCZ,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}