{"ast":null,"code":"var _jsxFileName = \"/Users/code-princess/Desktop/React/Project4/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Header from './Components/Header/Header';\nimport UserInput from './Components/UserInput/UserInput';\nimport Table from './Components/Table/Table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [userInput, setUserInput] = useState(null);\n  const calculateHandler = userInput => {\n    setUserInput(userInput);\n  };\n  if (userInput) {\n    // per-year results\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n  }\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserInput, {\n      onCalculate: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), !userInput && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You have no investments yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 22\n    }, this), userInput && /*#__PURE__*/_jsxDEV(Table, {\n      data: yearlyData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"fCXvCeCdp/eInhYAy188SZ+/4/8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Header","UserInput","Table","jsxDEV","_jsxDEV","App","_s","userInput","setUserInput","calculateHandler","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","yearlyData","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","onCalculate","data","_c","$RefreshReg$"],"sources":["/Users/code-princess/Desktop/React/Project4/src/App.js"],"sourcesContent":["\nimport React,{useState} from 'react';\nimport Header from './Components/Header/Header';\nimport UserInput from './Components/UserInput/UserInput';\nimport Table from './Components/Table/Table';\n\nfunction App() {\n  const[userInput,setUserInput] = useState(null)\n  const calculateHandler = (userInput) => {\n    setUserInput(userInput);\n    }\n\n    if(userInput){\n\n     // per-year results\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n\n    }\n\n    \n  };\n\n  return (\n    <div>\n      <Header />\n\n      <UserInput onCalculate = {calculateHandler} />\n      {!userInput && <p>You have no investments yet</p>}\n      {userInput && <Table data = {yearlyData}/>}\n     \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AACA,OAAOA,KAAK,IAAEC,QAAQ,QAAO,OAAO;AACpC,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,SAAS,MAAM,kCAAkC;AACxD,OAAOC,KAAK,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAK,CAACC,SAAS,EAACC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAMU,gBAAgB,GAAIF,SAAS,IAAK;IACtCC,YAAY,CAACD,SAAS,CAAC;EACvB,CAAC;EAED,IAAGA,SAAS,EAAC;IAEZ;;IAED,IAAIG,cAAc,GAAG,CAACH,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMI,kBAAkB,GAAG,CAACJ,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMK,cAAc,GAAG,CAACL,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMM,QAAQ,GAAG,CAACN,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDK,UAAU,CAACC,IAAI,CAAC;QACd;QACAC,IAAI,EAAEJ,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BI,gBAAgB,EAAET,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IAEJ;EAGF;EAAC;EAED,oBACEP,OAAA;IAAAgB,QAAA,gBACEhB,OAAA,CAACJ,MAAM;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEVpB,OAAA,CAACH,SAAS;MAACwB,WAAW,EAAIhB;IAAiB;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC7C,CAACjB,SAAS,iBAAIH,OAAA;MAAAgB,QAAA,EAAG;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAChDjB,SAAS,iBAAIH,OAAA,CAACF,KAAK;MAACwB,IAAI,EAAIV;IAAW;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEvC,CAAC;AAEV;AAAClB,EAAA,CA1CQD,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AA4CZ,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}